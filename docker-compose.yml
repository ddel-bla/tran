
services:
  db:
    build: ./postgres
    container_name: postgres
    env_file:
      - ./postgres/conf/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-42:
    build: ./auth-42
    container_name: auth-42
    command: sh -c "
      python manage.py makemigrations api &&
      python manage.py migrate &&
      gunicorn --certfile=/certs/cert.crt --keyfile=/certs/cert.key -b 0.0.0.0:8442 api.wsgi"
    env_file:
    - auth-42/.env
    ports:
      - "8442:8442"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - ./frontend/certs:/certs

  auth-local:
    build: ./auth-local
    container_name: auth-local
    command: sh -c "
      python manage.py makemigrations api &&
      python manage.py migrate &&
      gunicorn --certfile=/certs/cert.crt --keyfile=/certs/cert.key -b 0.0.0.0:8441 api.wsgi"
    env_file:
      - auth-local/.env
    ports:
      - "8441:8441"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - ./frontend/certs:/certs

  frontend:
    build: ./frontend
    container_name: apache-web
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - auth-42
      - auth-local
    networks:
      - app_network
    volumes:
      - ./frontend/certs:/etc/ssl/certs
      - ./frontend/public_html:/var/www/html/
      - ./frontend/pong-ssl.conf:/etc/apache2/sites-available/pong-ssl.conf


volumes:
  postgres_data:
  grafana_data:

networks:
  app_network:
    driver: bridge
